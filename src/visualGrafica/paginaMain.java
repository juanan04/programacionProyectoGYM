/*
 * JFrame Form de la página principal
 */
package visualGrafica;

import clases.Cliente;
import clases.Evento;
import clases.Gym;
import clases.Maquina;
import clases.Persona;
import clases.Producto;
import clases.Trabajador;
import dialogos.DialogoCliente;
import dialogos.DialogoEvento;
import dialogos.DialogoMaquina;
import dialogos.DialogoPersona;
import dialogos.DialogoProducto;
import dialogos.DialogoTrabajador;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author jaara
 */
public class paginaMain extends javax.swing.JFrame {

    /*Establecemos los atributos necesarios*/
    private Gym gym;    // Clase del Stream
    private String clase;   // Valor de clase Escogida en el inicio.java
    DefaultListModel<Object> modelo = new DefaultListModel<>(); // Modelo de la lista por defecto
    DefaultComboBoxModel<String> modeloCombo = new DefaultComboBoxModel<>();    // Modelo del comboBox Ordenar por defecto
    private String txtComboOrdenar; // Opciones a mostrar en el ComboBox
    private boolean estado; //  Booleano que indicará la orientación de la flecha del apartado "Ordenar"
    private Map<Object, Integer> indicesMap = new HashMap<>();  //  Mapa para que recuerde los datos por defecto que tiene la lista (necesario para la búsquda)
    private boolean evadirSobrecarga = false;   //  Booleano para evitar que en el comboBox se repitan las opciones cada vez que se refresca la página.

    /*Creación de listas para ordenamiento de cada clase*/
    // Lista guardadas para poder luego referirnos a cada objeto individualmente
    List<Producto> listaProducto = new ArrayList<>();
    List<Maquina> listaMaquina = new ArrayList<>();
    List<Evento> listaEvento = new ArrayList<>();
    List<Persona> listaPersona = new ArrayList<>();
    List<Cliente> listaCliente = new ArrayList<>();
    List<Trabajador> listaTrabajador = new ArrayList<>();

    /*Constructor de la página Main*/
    public paginaMain() {
        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);  //  Indicamos que no se cierre al pulsar la "X"
        gym = new Gym();    //  Inicializamos Gym

        /*Inicializa las listas de las clases*/
        listaProducto = gym.getProductos();
        listaMaquina = gym.getMaquinas();
        listaEvento = gym.getEventos();
        listaPersona = gym.getPersonas();
        listaCliente = gym.getClientes();
        listaTrabajador = gym.getTrabajadores();

        /*Deshabilitamos los botones Update y Delete*/
        botonDelete.setEnabled(false);
        botonUpdate.setEnabled(false);

        /*Condicional para habilitar los botones Update y Delete en caso de seleccionar algún elemento de la lista*/
        listaDatos.addListSelectionListener(e -> {
            if (!listaDatos.isSelectionEmpty()) {
                botonDelete.setEnabled(true);
                botonUpdate.setEnabled(true);
            } else {
                botonDelete.setEnabled(false);
                botonUpdate.setEnabled(false);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        colorFondo = new javax.swing.JPanel();
        tituloClase = new javax.swing.JLabel();
        botonAdd = new javax.swing.JButton();
        botonDelete = new javax.swing.JButton();
        botonUpdate = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaDatos = new javax.swing.JList<>();
        btnGuardarYSalir = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        txtBusqueda = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboOrdenar = new javax.swing.JComboBox<>();
        botonOrdenar = new javax.swing.JButton();
        botonFlecha = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        jButton2.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestor de datos");
        setMinimumSize(new java.awt.Dimension(800, 660));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                cierreVentana(evt);
            }
        });
        getContentPane().setLayout(null);

        colorFondo.setBackground(new java.awt.Color(255, 204, 153));
        colorFondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tituloClase.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 36)); // NOI18N
        colorFondo.add(tituloClase, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 470, 60));

        botonAdd.setText("Añadir");
        botonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddActionPerformed(evt);
            }
        });
        colorFondo.add(botonAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 150, 40));

        botonDelete.setText("Eliminar");
        botonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDeleteActionPerformed(evt);
            }
        });
        colorFondo.add(botonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 150, 40));

        botonUpdate.setText("Actualizar");
        botonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonUpdateActionPerformed(evt);
            }
        });
        colorFondo.add(botonUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 100, 150, 40));

        btnVolver.setText("Cambiar de Clase");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        colorFondo.add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jScrollPane2.setViewportView(listaDatos);

        colorFondo.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 740, 360));

        btnGuardarYSalir.setText("Guardar y Salir");
        btnGuardarYSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarYSalirActionPerformed(evt);
            }
        });
        colorFondo.add(btnGuardarYSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 10, -1, -1));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        colorFondo.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, -1, -1));
        colorFondo.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 320, 50));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        colorFondo.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 80, 30));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Ordenar por:");
        colorFondo.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, -1, -1));

        colorFondo.add(comboOrdenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 180, 150, -1));

        botonOrdenar.setText("Ordenar");
        botonOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOrdenarActionPerformed(evt);
            }
        });
        colorFondo.add(botonOrdenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 210, 80, 20));

        botonFlecha.setText("↑");
        botonFlecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFlechaActionPerformed(evt);
            }
        });
        colorFondo.add(botonFlecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 180, 40, -1));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        colorFondo.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jScrollPane1.setViewportView(colorFondo);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 790, 680);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Método de acción al pulsar el botón Add (Añadir) 
     */
    private void botonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddActionPerformed
        try {
            switch (clase) {    //  Indicamos acción independiente para cada clase
                case "Productos":
                    DialogoProducto diPro = new DialogoProducto(this, true);    //  Llamamos al diálogo necesario
                    diPro.tipoAccion("Añadir"); //  Se le indica el tipo de acción a realizar al JDialog
                    diPro.setVisible(true); //  Mostramos el diálogo
                    evadirSobrecarga = true;    //  Evitamos que ciertos parámetros se repitan
                    establecerModelo(); //  Método para cargar el modelo de nuevo junto los datos guardados
                    break;
                case "Personas":
                    DialogoPersona diPer = new DialogoPersona(this, true);
                    diPer.tipoAccion("Añadir");
                    diPer.setVisible(true);
                    evadirSobrecarga = true;
                    establecerModelo();
                    break;
                case "Máquinas":
                    DialogoMaquina diMaq = new DialogoMaquina(this, true);
                    diMaq.tipoAccion("Añadir");
                    diMaq.setVisible(true);
                    evadirSobrecarga = true;
                    establecerModelo();
                    break;
                case "Eventos":
                    DialogoEvento diEve = new DialogoEvento(this, true);
                    diEve.tipoAccion("Añadir");
                    diEve.setVisible(true);
                    evadirSobrecarga = true;
                    establecerModelo();
                    break;
                case "Clientes":
                    DialogoCliente diCli = new DialogoCliente(this, true);
                    diCli.tipoAccion("Añadir");
                    diCli.setVisible(true);
                    evadirSobrecarga = true;
                    establecerModelo();
                    break;
                case "Trabajadores":
                    DialogoTrabajador diTra = new DialogoTrabajador(this, true);
                    diTra.tipoAccion("Añadir");
                    diTra.setVisible(true);
                    evadirSobrecarga = true;
                    establecerModelo();
                    break;
            }
        } catch (Exception ex) {    //  Recogemos cualquier excepción para soltar mensaje de error
            JOptionPane.showMessageDialog(this,
                    "Error al añadir el dato: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_botonAddActionPerformed

    /*
     *  Método de acción al pulsar el botón volver 
     */
    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        String botones[] = {"Continuar", "Cancelar"};   //  Indicamos texto opciones botones
        int eleccion = JOptionPane.showOptionDialog( // Creamos ventana emergente con opción a elegir
                this,
                "¿Desea salir del gestor " + clase + "?" + "\n" +
                        "Asegúrese de haber guardado los cambios",
                "Salir del Gestor" + clase,
                0,
                0,
                null,
                botones,
                this);
        if (eleccion == JOptionPane.YES_OPTION) {   //  Condicional de realización de acción según botón marcado
            inicio ini = new inicio();
            ini.setVisible(true);
            this.dispose();
        } else if (eleccion == JOptionPane.NO_OPTION) {
            System.out.println("Cierre cancelado");
        }

    }//GEN-LAST:event_btnVolverActionPerformed

    /*
     *  Método para la acción del botón Delete (Borrar)
     */
    private void botonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDeleteActionPerformed
        int indiceListaSelect = listaDatos.getSelectedIndex();  //  Inicializamos variable del índice de la lista seleccionado
        if (indiceListaSelect != -1) {  //  Si el índice es distinto a -1...
            modelo = (DefaultListModel) listaDatos.getModel();  //  Obtenemos el modelo de la lista
            Object elementoSeleccionado = modelo.getElementAt(indiceListaSelect);   //  Obtenemos el índice seleccionado de dicha lista (Inicializada en variable)
            eliminarElemento(elementoSeleccionado); //  Llamamos al método eliminarElemento (Para eliminar el dato interno)
            modelo.remove(indiceListaSelect);   // Borramos el dato en el JList
            JOptionPane.showMessageDialog( //  Mostramos mensaje de realización correcta
                    this,
                    "El dato ha sido eliminado con éxito",
                    "Cambio Realizado",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } else {
            JOptionPane.showMessageDialog( //  En caso contrario se lanza mensaje con Error
                    this,
                    "Ha ocurrido un error al eliminar",
                    "ERROR AL ELIMINAR",
                    JOptionPane.ERROR_MESSAGE
            );
        }

    }//GEN-LAST:event_botonDeleteActionPerformed

    /*
     *  Método acción del botón Update (Actualizar)
     */
    private void botonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonUpdateActionPerformed
        try {
            switch (clase) {    //  Un condicional para una acción específica por cada clase
                case "Productos":
                    DialogoProducto diPro = new DialogoProducto(this, true);    //  Se crea el diálogo para actualizar
                    diPro.tipoAccion("Actualizar"); //  Se le indica el tipo de acción a realizar al JDialog
                    diPro.setVisible(true); //  Hacemos visible el diálogo
                    listaDatos.repaint();   //  Finalmente repintamos la lista para que se muestren los cambios
                    break;
                case "Personas":
                    DialogoPersona diPer = new DialogoPersona(this, true);
                    diPer.tipoAccion("Actualizar");
                    diPer.setVisible(true);
                    listaDatos.repaint();
                    break;
                case "Máquinas":
                    DialogoMaquina diMaq = new DialogoMaquina(this, true);
                    diMaq.tipoAccion("Actualizar");
                    diMaq.setVisible(true);
                    listaDatos.repaint();
                    break;
                case "Eventos":
                    DialogoEvento diEve = new DialogoEvento(this, true);
                    diEve.tipoAccion("Actualizar");
                    diEve.setVisible(true);
                    listaDatos.repaint();
                    break;
                case "Clientes":
                    DialogoCliente diCli = new DialogoCliente(this, true);
                    diCli.tipoAccion("Actualizar");
                    diCli.setVisible(true);
                    listaDatos.repaint();
                    break;
                case "Trabajadores":
                    DialogoTrabajador diTra = new DialogoTrabajador(this, true);
                    diTra.tipoAccion("Actualizar");
                    diTra.setVisible(true);
                    listaDatos.repaint();
                    break;
            }
        } catch (Exception ex) {    //  Recogemos cualquier Excepción que pueda dar para lanzar mensaje de Error
            JOptionPane.showMessageDialog(this,
                    "Error al actualizar el dato: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_botonUpdateActionPerformed

    /*
     *  Método para Guardar pero NO salir del programa
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardar();  //  Método que se encargará de guardar los datos
    }//GEN-LAST:event_btnGuardarActionPerformed

    /*
     *  Método para Guardar y Salir del programa
     */
    private void btnGuardarYSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarYSalirActionPerformed
        guardar();
        this.dispose();
    }//GEN-LAST:event_btnGuardarYSalirActionPerformed

    /*
     *  Método para cerrar la ventana del programa Principal (vuelve a inicio.java)
     */
    private void cierreVentana(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_cierreVentana
        Cerrar();   // Método para cerrar la ventana (no es lo mismo que cerrar el programa)
    }//GEN-LAST:event_cierreVentana

    /*
     *  Método de acción para Ordenar según campo del JComboBox seleccionado además de indicar el orden (ascendente | descendente)
     */
    private void botonOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOrdenarActionPerformed
        try {
            txtComboOrdenar = comboOrdenar.getSelectedItem().toString();    //  Se recoge el parámetro de búsqueda escogido en el comboBox
            ordenarLista(); //  Método que ordena la lista del objetos (depende de clase estemos será una u otra lista)
            switch (clase) {    //  Para cada clase se crea una acción específica
                case "Productos":
                    switch (txtComboOrdenar) {  //  Para cada atributo de dicha clase se crea una acción específica
                        case "Nombre":  //  En la acción de cada atributo se compara y se ordena según el sentido de la flecha
                            Comparator<Producto> comparadorNombreProducto = Comparator.comparing(Producto::getNombre);  //  Utilizamos Comparator<?> para comparar cada atributo de cada clase
                            if (botonFlecha.getText().equals("↑")) {    //  orden Ascendente
                                Collections.sort(listaProducto, comparadorNombreProducto);
                            } else if (botonFlecha.getText().equals("↓")) { //  orden Descendente
                                Collections.sort(listaProducto, Collections.reverseOrder(comparadorNombreProducto));
                            }
                            break;
                        case "Precio":
                            Comparator<Producto> comparadorPrecioProducto = Comparator.comparing(Producto::getPrecio);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaProducto, comparadorPrecioProducto);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaProducto, Collections.reverseOrder(comparadorPrecioProducto));
                            }
                            break;
                        case "Código":
                            Comparator<Producto> comparadorCodigoProducto = Comparator.comparing(Producto::getCodigo);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaProducto, comparadorCodigoProducto);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaProducto, Collections.reverseOrder(comparadorCodigoProducto));
                            }
                            break;
                    }
                    //Limpiar el modelo anterior del JList
                    modelo.clear();

                    // Agregar  los elementos ordenados al modelo JList
                    for (Producto p : listaProducto) {
                        modelo.addElement(p);
                    }
                    break;

                case "Personas":
                    switch (txtComboOrdenar) {
                        case "Nombre":
                            Comparator<Persona> comparadorNombrePersona = Comparator.comparing(Persona::getNombre);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaPersona, comparadorNombrePersona);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaPersona, Collections.reverseOrder(comparadorNombrePersona));
                            }
                            break;
                        case "Apellidos":
                            Comparator<Persona> comparadorApellidosPersona = Comparator.comparing(Persona::getApellidos);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaPersona, comparadorApellidosPersona);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaPersona, Collections.reverseOrder(comparadorApellidosPersona));
                            }
                            break;
                        case "DNI":
                            Comparator<Persona> comparadorDNIPersona = Comparator.comparing(Persona::getDni);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaPersona, comparadorDNIPersona);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaPersona, Collections.reverseOrder(comparadorDNIPersona));
                            }
                            break;
                        case "Fecha Nac.":
                            Comparator<Persona> comparadorFechaNacimientoPersona = Comparator.comparing(Persona::getFechaNacimiento);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaPersona, comparadorFechaNacimientoPersona);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaPersona, Collections.reverseOrder(comparadorFechaNacimientoPersona));
                            }
                            break;
                        case "Sexo":
                            Comparator<Persona> comparadorSexoPersona = Comparator.comparing(Persona::getSexo);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaPersona, comparadorSexoPersona);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaPersona, Collections.reverseOrder(comparadorSexoPersona));
                            }
                            break;
                    }
                    modelo.clear();

                    for (Persona pe : listaPersona) {
                        modelo.addElement(pe);
                    }
                    break;
                case "Máquinas":
                    switch (txtComboOrdenar) {
                        case "Nombre":
                            Comparator<Maquina> comparadorMaquinaNombre = Comparator.comparing(Maquina::getNombre);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaMaquina, comparadorMaquinaNombre);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaMaquina, Collections.reverseOrder(comparadorMaquinaNombre));
                            }
                            break;
                        case "Ubicación":
                            Comparator<Maquina> comparadorMaquinaUbi = Comparator.comparing(Maquina::getUbicacion);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaMaquina, comparadorMaquinaUbi);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaMaquina, Collections.reverseOrder(comparadorMaquinaUbi));

                                break;
                            }
                            modelo.clear();

                            for (Maquina m : listaMaquina) {
                                modelo.addElement(m);
                            }
                            break;
                    }
                case "Eventos":
                    switch (txtComboOrdenar) {
                        case "Nombre":
                            Comparator<Evento> comparadorEventoNombre = Comparator.comparing(Evento::getNombre);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaEvento, comparadorEventoNombre);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaEvento, Collections.reverseOrder(comparadorEventoNombre));
                            }
                            break;
                        case "Duración":
                            Comparator<Evento> comparadorEventoDuracion = Comparator.comparing(Evento::getDuracion);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaEvento, comparadorEventoDuracion);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaEvento, Collections.reverseOrder(comparadorEventoDuracion));
                            }
                            break;
                        case "Fecha y Hora":
                            Comparator<Evento> comparadorEventoFechaHora = Comparator.comparing(Evento::getFechaYhora);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaEvento, comparadorEventoFechaHora);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaEvento, Collections.reverseOrder(comparadorEventoFechaHora));
                            }
                            break;
                        case "Cant. Partp.":
                            Comparator<Evento> comparadorEventoCantidadParticipantes = Comparator.comparing(Evento::getCantidadParticipantes);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaEvento, comparadorEventoCantidadParticipantes);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaEvento, Collections.reverseOrder(comparadorEventoCantidadParticipantes));
                            }
                            break;
                    }
                    modelo.clear();

                    for (Evento e : listaEvento) {
                        modelo.addElement(e);
                    }
                    break;

                case "Clientes":
                    switch (txtComboOrdenar) {
                        case "Nombre":
                            Comparator<Cliente> comparadorClienteNombre = Comparator.comparing(Cliente::getNombre);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteNombre);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteNombre));
                            }
                            break;
                        case "Apellidos":
                            Comparator<Cliente> comparadorClienteApellidos = Comparator.comparing(Cliente::getApellidos);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteApellidos);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteApellidos));
                            }
                            break;
                        case "DNI":
                            Comparator<Cliente> comparadorClienteDNI = Comparator.comparing(Cliente::getDni);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteDNI);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteDNI));
                            }
                            break;
                        case "Fecha Nac.":
                            Comparator<Cliente> comparadorClienteFechaNacimiento = Comparator.comparing(Cliente::getFechaNacimiento);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteFechaNacimiento);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteFechaNacimiento));
                            }
                            break;
                        case "Sexo":
                            Comparator<Cliente> comparadorClienteSexo = Comparator.comparing(Cliente::getSexo);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteSexo);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteSexo));
                            }
                            break;
                        case "Peso":
                            Comparator<Cliente> comparadorClientePeso = Comparator.comparing(Cliente::getPeso);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClientePeso);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClientePeso));
                            }
                            break;
                        case "Altura":
                            Comparator<Cliente> comparadorClienteAltura = Comparator.comparing(Cliente::getAltura);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteAltura);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteAltura));
                            }
                            break;
                        case "Duración Mes":
                            Comparator<Cliente> comparadorClienteDuracionMes = Comparator.comparing(Cliente::getDuracionMensualidad);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteDuracionMes);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteDuracionMes));
                            }
                            break;
                        case "Forma Pago":
                            Comparator<Cliente> comparadorClienteFormaPago = Comparator.comparing(Cliente::getFormaPago);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaCliente, comparadorClienteFormaPago);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaCliente, Collections.reverseOrder(comparadorClienteFormaPago));
                            }
                            break;
                    }
                    modelo.clear();

                    for (Cliente c : listaCliente) {
                        modelo.addElement(c);
                    }
                    break;

                case "Trabajadores":
                    switch (txtComboOrdenar) {
                        case "Nombre":
                            Comparator<Trabajador> comparadorTrabajadorNombre = Comparator.comparing(Trabajador::getNombre);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaTrabajador, comparadorTrabajadorNombre);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaTrabajador, Collections.reverseOrder(comparadorTrabajadorNombre));
                            }
                            break;
                        case "Apellidos":
                            Comparator<Trabajador> comparadorTrabajadorApellidos = Comparator.comparing(Trabajador::getApellidos);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaTrabajador, comparadorTrabajadorApellidos);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaTrabajador, Collections.reverseOrder(comparadorTrabajadorApellidos));
                            }
                            break;
                        case "DNI":
                            Comparator<Trabajador> comparadorTrabajadorDNI = Comparator.comparing(Trabajador::getDni);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaTrabajador, comparadorTrabajadorDNI);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaTrabajador, Collections.reverseOrder(comparadorTrabajadorDNI));
                            }
                            break;
                        case "Fecha Nac.":
                            Comparator<Trabajador> comparadorTrabajadorFechaNacimiento = Comparator.comparing(Trabajador::getFechaNacimiento);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaTrabajador, comparadorTrabajadorFechaNacimiento);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaTrabajador, Collections.reverseOrder(comparadorTrabajadorFechaNacimiento));
                            }
                            break;
                        case "Sexo":
                            Comparator<Trabajador> comparadorTrabajadorSexo = Comparator.comparing(Trabajador::getSexo);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaTrabajador, comparadorTrabajadorSexo);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaTrabajador, Collections.reverseOrder(comparadorTrabajadorSexo));
                            }
                            break;
                        case "Sueldo":
                            Comparator<Trabajador> comparadorTrabajadorSueldo = Comparator.comparing(Trabajador::getSueldo);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaTrabajador, comparadorTrabajadorSueldo);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaTrabajador, Collections.reverseOrder(comparadorTrabajadorSueldo));
                            }
                            break;
                        case "Especialidad":
                            Comparator<Trabajador> comparadorTrabajadorEspecialidad = Comparator.comparing(Trabajador::getEspecialidad);
                            if (botonFlecha.getText().equals("↑")) {
                                Collections.sort(listaTrabajador, comparadorTrabajadorEspecialidad);
                            } else if (botonFlecha.getText().equals("↓")) {
                                Collections.sort(listaTrabajador, Collections.reverseOrder(comparadorTrabajadorEspecialidad));
                            }
                            break;
                    }
                    modelo.clear();

                    for (Trabajador t : listaTrabajador) {
                        modelo.addElement(t);
                    }
                    break;
            }
        } catch (Exception ex) {    //  Recogemos la Excepcion de forma genérica para lanzar mensaje de error
            JOptionPane.showMessageDialog(this,
                    "Error al ordenar: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_botonOrdenarActionPerformed

    /*
     * Método accion para cambiar dirección de la flecha
     */
    private void botonFlechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFlechaActionPerformed
        cambiarDireccionFlecha();   //  Se llama al método encargado de la dirección de la flecha
    }//GEN-LAST:event_botonFlechaActionPerformed

    /*
     *  Método acción para buscar un dato en el JList
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            String textoBusqueda = txtBusqueda.getText();
            List<Object> elementosEncontrados = buscarElementos(textoBusqueda); //  Llamamos al método para encargado de buscar los elementos
            if (elementosEncontrados.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "No se han encontrado resultados",
                        "Búsqueda",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            modelo.clear();
            for (Object elemento : elementosEncontrados) {
                modelo.addElement(elemento);
            }
        } catch (HeadlessException ex) {    //  Exepción referente al entorno de pantalla ¿?    
            JOptionPane.showMessageDialog(this,
                    "Error al buscar el dato: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    /*
     *  Método acción del botón Refresh (Refrescar)
     */
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        establecerModelo(); //  Carga el modelo de la lista de nuevo
        evadirSobrecarga = true;    //  Evitamos que se repitan ciertos datos de nuestro JFrame
    }//GEN-LAST:event_btnRefreshActionPerformed

    /*Métodos getter*/
    public Gym getGym() {
        return gym;
    }

    public DefaultListModel<Object> getModeloLista() {
        return modelo;
    }

    /*Métodos para devolver el dato seleccionado según la clase*/
    public Producto getSelectedProductoListaDatos() {
        return (Producto) listaDatos.getSelectedValue();
    }

    public Persona getSelectedPersonaListaDatos() {
        return (Persona) listaDatos.getSelectedValue();
    }

    public Maquina getSelectedMaquinaListaDatos() {
        return (Maquina) listaDatos.getSelectedValue();
    }

    public Evento getSelectedEventoListaDatos() {
        return (Evento) listaDatos.getSelectedValue();
    }

    public Cliente getSelectedClienteListaDatos() {
        return (Cliente) listaDatos.getSelectedValue();
    }

    public Trabajador getSelectedTrabajadorListaDatos() {
        return (Trabajador) listaDatos.getSelectedValue();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(paginaMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(paginaMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(paginaMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(paginaMain.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new paginaMain().setVisible(true);
            }
        });
    }

    /*
     *  Método encargado de dar un JOptionPane antes de cerrar (aviso antes de cerrar)
     */
    private void Cerrar() {
        String botones[] = {"Cerrar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(
                this,
                "¿Desea cerrar el programa?",
                "Cerrar Programa",
                0,
                0,
                null,
                botones,
                this);
        if (eleccion == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else if (eleccion == JOptionPane.NO_OPTION) {
            System.out.println("Cierre cancelado");
        }
    }

    /*
     *  Método encargado de guardar los cambios realizado
     */
    public void guardar() {
        JOptionPane.showMessageDialog( //  Muestra diálogo de Información de guardado con éxito
                this,
                "Se han guardado los datos",
                "Guardado con Éxito",
                JOptionPane.INFORMATION_MESSAGE
        );
        Gym.guardarDatos(gym);  //  Guarda los datos
    }

    /*
     *  Método setter para el tipo de clase escogida en el JComboBox del JFrame inicio.java
     */
    public void setClase(String clase) {
        this.clase = clase;
        tituloClase.setText("Gestión de " + clase);
        /*Selección de clase a mostrar en la lista*/
        gym = Gym.cargarDatos();

        /*Limpiar el modelo antes de agregar elementos*/
        establecerModelo();
        botonAdd.setText("Añadir " + pluralASingular(clase));
        botonDelete.setText("Eliminar " + pluralASingular(clase));
        botonUpdate.setText("Actualizar " + pluralASingular(clase));
    }

    /*
     *  Método para poder cambiar el String de la clase seleccionada al Singular (Útil para poder nombrar de forma correcta los botones)
     */
    public static String pluralASingular(String clase) {
        String claseS = clase;
        if (clase.endsWith("res")) {    //  Una específica para "Trabajadores"
            claseS = clase.substring(0, clase.length() - 3) + "r";
        } else if (clase.endsWith("s")) {   //  Para el resto de clases
            claseS = clase.substring(0, clase.length() - 1);
        }
        return claseS;
    }

    /*
     *  Método para establecer los datos a utilizar al modelo de la lista
     */
    public void establecerModelo() {
        modelo.clear(); //  Limpiamos siempre para asegurarnos de no tener datos erroneos guardados
        switch (clase) {    //  Condicional para la acción de carga según la clase seleccionada
            case "Productos":
                for (Producto p : gym.getProductos()) { //  Bucle para insrtar los elementos cargados de la lista
                    modelo.addElement(p);   //  Se inserta dicho elemento en el modelo Lista
                }
                if (!evadirSobrecarga) {    //  Si no hay nada en el comboBox de ordenar insertar dichas opciones
                    modeloCombo.addElement("Nombre");
                    modeloCombo.addElement("Precio");
                    modeloCombo.addElement("Código");
                    comboOrdenar.setModel(modeloCombo); //  Se establece el modelo del comboBoxOrdenar
                }
                break;
            case "Personas":
                for (Persona pe : gym.getPersonas()) {
                    modelo.addElement(pe);
                }
                if (!evadirSobrecarga) {
                    modeloCombo.addElement("Nombre");
                    modeloCombo.addElement("Apellidos");
                    modeloCombo.addElement("DNI");
                    modeloCombo.addElement("Fecha Nac.");
                    modeloCombo.addElement("Sexo");
                    comboOrdenar.setModel(modeloCombo);
                }
                break;
            case "Máquinas":
                for (Maquina m : gym.getMaquinas()) {
                    modelo.addElement(m);
                }
                if (!evadirSobrecarga) {
                    modeloCombo.addElement("Nombre");
                    modeloCombo.addElement("Ubicación");
                    comboOrdenar.setModel(modeloCombo);
                }
                break;
            case "Eventos":
                for (Evento e : gym.getEventos()) {
                    modelo.addElement(e);
                }
                if (!evadirSobrecarga) {
                    modeloCombo.addElement("Nombre");
                    modeloCombo.addElement("Duración");
                    modeloCombo.addElement("Fecha y Hora");
                    modeloCombo.addElement("Cant. Partp.");
                    comboOrdenar.setModel(modeloCombo);
                }
                break;
            case "Clientes":
                for (Cliente c : gym.getClientes()) {
                    modelo.addElement(c);
                }
                if (!evadirSobrecarga) {
                    modeloCombo.addElement("Nombre");
                    modeloCombo.addElement("Apellidos");
                    modeloCombo.addElement("DNI");
                    modeloCombo.addElement("Fecha Nac.");
                    modeloCombo.addElement("Sexo");
                    modeloCombo.addElement("Peso");
                    modeloCombo.addElement("Altura");
                    modeloCombo.addElement("Duración Mes");
                    modeloCombo.addElement("Forma Pago");
                    comboOrdenar.setModel(modeloCombo);
                }
                break;
            case "Trabajadores":
                for (Trabajador t : gym.getTrabajadores()) {
                    modelo.addElement(t);
                }
                if (!evadirSobrecarga) {
                    modeloCombo.addElement("Nombre");
                    modeloCombo.addElement("Apellidos");
                    modeloCombo.addElement("DNI");
                    modeloCombo.addElement("Fecha Nac.");
                    modeloCombo.addElement("Sexo");
                    modeloCombo.addElement("Sueldo");
                    modeloCombo.addElement("Especialidad");
                    comboOrdenar.setModel(modeloCombo);
                }
                break;
        }
        //Asignar el modelo actualizado al JLists
        listaDatos.setModel(modelo);
    }

    /*
     *  Métodos para eliminar datos según la clase
     */
    public void eliminarElemento(Object elemento) {
        try {   //  Se eliminará el dato seleccionado según la clase
            switch (clase) {
                case "Productos":
                    gym.getProductos().removeIf(p -> p.equals(elemento)); // Expresión lambda para elimina el dato seleccionado equivalente a elemento
                    break;
                case "Personas":    //  Se crean expresiones lambda al principio para eliminar el cliente o trabajador que esté enlazado con la persona
                    JOptionPane.showMessageDialog(
                            this, 
                            "Recuerde eliminar el cliente/trabajador asociado a dicha persona", 
                            "Cliente/Trabajador Asociado", 
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    gym.getPersonas().removeIf(pe -> pe.equals(elemento));
                    break;
                case "Máquinas":
                    gym.getMaquinas().removeIf(m -> m.equals(elemento));
                    break;
                case "Eventos":
                    gym.getEventos().removeIf(e -> e.equals(elemento));
                    break;
                case "Clientes":
                    gym.getClientes().removeIf(c -> c.equals(elemento));
                    break;
                case "Trabajadores":
                    gym.getTrabajadores().removeIf(t -> t.equals(elemento));
                    break;
            }
        } catch (IndexOutOfBoundsException ex) {    //  En caso de seleccionar un ídice que no exista, lanza dialogo de error
            JOptionPane.showConfirmDialog(
                    this,
                    "El dato no existe",
                    "Error al Eliminar",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    /*
     *  Método superimportante para cambiar el sentido de la flecha de un JButton
     */
    public void cambiarDireccionFlecha() {
        estado = !estado;
        if (estado) {
            botonFlecha.setText("↓");
        } else {
            botonFlecha.setText("↑");
        }
    }

    /*
     *  Método encargado de ordenar los datos según la clase
     */
    public void ordenarLista() {
        int size = modelo.getSize();    //  Variable para el tamño total del modeloLista en ese momento
        switch (clase) {
            case "Productos":
                listaProducto.clear();  //  Se empieza limpiando el modelo
                for (int i = 0; i < size; i++) {
                    Producto elementoJList = (Producto) modelo.getElementAt(i); //  Se crea el elemento de la lista por índice
                    listaProducto.add(elementoJList);   //  Se añade dicho elemento a la lista específica del objeto
                }   //  Se repetirá el equivalente a el numero de elementos que haya
                break;
            case "Personas":
                listaPersona.clear();
                for (int i = 0; i < size; i++) {
                    Persona elementoJList = (Persona) modelo.getElementAt(i);
                    listaPersona.add(elementoJList);
                }
                break;
            case "Máquinas":
                listaMaquina.clear();
                for (int i = 0; i < size; i++) {
                    Maquina elementoJList = (Maquina) modelo.getElementAt(i);
                    listaMaquina.add(elementoJList);
                }
                break;
            case "Eventos":
                listaEvento.clear();
                for (int i = 0; i < size; i++) {
                    Evento elementoJList = (Evento) modelo.getElementAt(i);
                    listaEvento.add(elementoJList);
                }
                break;
            case "Clientes":
                listaCliente.clear();
                for (int i = 0; i < size; i++) {
                    Cliente elementoJList = (Cliente) modelo.getElementAt(i);
                    listaCliente.add(elementoJList);
                }
                break;
            case "Trabajadores":
                listaTrabajador.clear();
                for (int i = 0; i < size; i++) {
                    Trabajador elementoJList = (Trabajador) modelo.getElementAt(i);
                    listaTrabajador.add(elementoJList);
                }
                break;
        }

    }

    /*
     *  Método encargado de buscar los elementos que se encuentre en el JList
     */
    private List<Object> buscarElementos(String texto) {
        List<Object> elementosEncontrados = new ArrayList<>();  //  Se crea una lista para los datos de la búsqueda
        for (int i = 0; i < modelo.getSize(); i++) {    //  Bucle que recorrerá el modelo de la lista actual
            Object elemento = modelo.getElementAt(i);   //  Añadimos lo encontrado a nuestra lista
            if (elemento.toString().toLowerCase().contains(texto.toLowerCase())) {  //  Condicional para comparar el elemento de la lista con el buscado
                elementosEncontrados.add(elemento); //  Si coinciden lo inserta
            }
        }
        return elementosEncontrados;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAdd;
    private javax.swing.JButton botonDelete;
    private javax.swing.JButton botonFlecha;
    private javax.swing.JButton botonOrdenar;
    private javax.swing.JButton botonUpdate;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarYSalir;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnVolver;
    private javax.swing.JPanel colorFondo;
    private javax.swing.JComboBox<String> comboOrdenar;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Object> listaDatos;
    private javax.swing.JLabel tituloClase;
    private javax.swing.JTextField txtBusqueda;
    // End of variables declaration//GEN-END:variables
}
